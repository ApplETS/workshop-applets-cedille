# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class InlineResponse400(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None):  # noqa: E501
        """InlineResponse400 - a model defined in OpenAPI

        :param code: The code of this InlineResponse400.  # noqa: E501
        :type code: str
        """
        self.openapi_types = {
            'code': str
        }

        self.attribute_map = {
            'code': 'code'
        }

        self._code = code

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse400':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_400 of this InlineResponse400.  # noqa: E501
        :rtype: InlineResponse400
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this InlineResponse400.

        Error code  # noqa: E501

        :return: The code of this InlineResponse400.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse400.

        Error code  # noqa: E501

        :param code: The code of this InlineResponse400.
        :type code: str
        """
        allowed_values = ["title_missing", "title_too_long", "description_too_long"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code
